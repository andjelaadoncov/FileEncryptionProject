@page "/file-exchange"

@using CryptographyWebApp.Services
@inject FileExchangeService FileExchangeService

<div class="file-exchange-page">
    <div class="file-exchange-container server-section">
        <h3>Server Mode</h3>
        <p>In server mode, you listen for incoming connection requests. When a user connects, they send an encrypted file, which you receive and decrypt on your end.</p>
        <label>Server Port:</label>
        <input type="number" @bind="ServerPort" />
        <button @onclick="ToggleServer">
            @(IsServerRunning ? "Stop Server" : "Start as Server")
        </button>
        <p>@ServerStatusMessage</p>
        @if (!string.IsNullOrEmpty(FileReceivedMessage))
        {
            <p style="color:green">@FileReceivedMessage</p>
        }

    </div>

    <div class="file-exchange-container client-section">
        <h3>Client Mode</h3>
        <p>In client mode, choose an encryption algorithm, encrypt your selected file, and send it to a specific user by entering their IP address.</p>
        <label>IP address:</label>
        <input type="text" @bind="ServerIpAddress" placeholder="Enter server IP" />

        <label>Port:</label>
        <input type="number" @bind="ClientPort" />

        <label>Encryption Algorithm:</label>
        <select @bind="SelectedAlgorithm" class="dropdown">
            <option value="RC6">RC6</option>
            <option value="RC6 OFB">RC6 OFB</option>
            <option value="Bifid">Bifid</option>
        </select>

        <label>Choose your file:</label>
        <InputFile OnChange="OnFileChange" />
        <button @onclick="SendFile" disabled="@(selectedFilePath == null)">Send File</button>
        <p>@FileSendStatusMessage</p>
    </div>
</div>

@code {
    private int ServerPort = 8000;
    private string ServerIpAddress = "127.0.0.1";
    private int ClientPort = 8000;
    private string selectedFilePath;
    private string SelectedAlgorithm = "Bifid";
    private string ServerStatusMessage = "";
    private string FileSendStatusMessage = "";
    private string FileReceivedMessage = "";
    private bool IsServerRunning = false;

    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var tempPath = Path.Combine(Path.GetTempPath(), file.Name); // Čuva originalno ime fajla

        using (var stream = file.OpenReadStream())
        using (var fileStream = File.Create(tempPath))
        {
            await stream.CopyToAsync(fileStream);
        }

        selectedFilePath = tempPath;
        Console.WriteLine($"File selected: {selectedFilePath}");
    }

    private async Task SendFile()
    {
        if (string.IsNullOrEmpty(selectedFilePath))
        {
            FileSendStatusMessage = "No file selected.";
            return;
        }

        FileSendStatusMessage = "Sending file...";
        await FileExchangeService.SendFile(ServerIpAddress, ClientPort, selectedFilePath, SelectedAlgorithm);
        FileSendStatusMessage = "File sent successfully.";
    }


    private async Task ToggleServer()
    {
        if (!IsServerRunning)
        {
            ServerStatusMessage = "Starting server...";
            FileExchangeService.OnFileReceived = (fileName) =>
            {
                FileReceivedMessage = $"You have received a file: {fileName}";
                InvokeAsync(StateHasChanged); // obavezno za ažuriranje UI-ja iz background threada
            };

            _ = Task.Run(async () =>
            {
                await FileExchangeService.StartServer(ServerPort);
            });

            IsServerRunning = true;
            ServerStatusMessage = $"Server started on port {ServerPort}.";
        }
        else
        {
            FileExchangeService.StopServer();
            IsServerRunning = false;
            ServerStatusMessage = "Server stopped.";
        }
    }

}